dhs_api_request:
  short: >-
    Makes a call to the DHS websites API. You canmake requests to any of their
    declared api endpoints (see \code{vignette(rdhs)} for more on these). API
    queries can be filtered by providing query terms, and you can control how
    many search results you want returned. The default paramters will return
    all of the results, and will format it nicely into a data.frame for you.
  params:
    api_endpoint: >-
      API endpoint. Must be one of the 12 possible endpoints.
    query: >-
      List of query filters. To see possible query filter terms for each endpoint
      then head to the DHS api website.
    api_key: >-
      DHS API key. Default will grab the key provided when the client was created.
    num_results: >-
      The Number of results to return. Default = "ALL" which will loop through all
      the api search results pages for you if there are more results than their API
      will allow you to fetch in one page. If you specify a number this many results
      will be returned (but probably best to just leave default).
    just_results: >-
      Boolean whetehr to return just the results or all the http API
      response. Default = TRUE (probably best again to leave as this.)
  value: >-
      Data.frame with search results if just_results=TRUE, otherwsie a nested
      list with all the API responses for each page required.

available_surveys:
  short: >-
    Searches the DHS website for all the surveys that you can donwloa.
    If the client has been created you will not have to pass in any
    parameters as these will be taken from your environment. The results
    of this function are cached.
  params:
    your_email: >-
      DHS login email. Default = Sys.getenv("rdhs.USER_EMAIL")
    your_password: >-
      DHS login password. Default = Sys.getenv("rdhs.USER_PASS")
    your_project: >-
      DHS project. Default = Sys.getenv("rdhs.USER_PROJECT")
    datasets_api_results: >-
      The list of potential datasets as declared from
      their api. The default argument fetches these so don't worry too much about
      this. Default = self$dhs_api_request("datasets",num_results = "ALL")
    surveys_api_results: >-
      The list of potential surveys as declared from
      their api. The default argument fetches these so don't worry too much about
      this. Default = self$dhs_api_request("surveys",num_results = "ALL")
  value: >-
      Data.frame object with 14 variables that detail the surveys you can download,
      their url download links and the country, survey, year etc info for that link.

download_survey:
  short: >-
    Using the output from \code{avaialable_surveys} the client will download the
    surveys you have requested. The
  params:
    your_email: >-
      DHS login email. Default = Sys.getenv("rdhs.USER_EMAIL")
    your_password: >-
      DHS login password. Default = Sys.getenv("rdhs.USER_PASS")
    your_project: >-
      DHS project. Default = Sys.getenv("rdhs.USER_PROJECT")
    output_dir_root: >-
      Root directory where the surveys will be stored within. The default will download
      surveys to a subfolder of the client root called "surveys"
    desired_survey: >-
      The desired survey to be downloaded. This represents a row(s) from \code{avaialable_surveys}.
      If multiple rows are requested the function will handle that and give you back the results
      in a list, with elements named accordingly for the survey downloaded.
    download_option: >-
      Character specifying whether the survey should be just downloaded ("zip"), extracted ("ex"),
      imported and saved as an .rds object ("rds"), or both extract and rds ("both"). Conveniently
      you can just specify any letter from these options.
    reformat: >-
      Boolean concerning whether to reformat read in datasets. Default = TRUE.
  value: >-
      Depends on the download_option requested, but ultimately it is a file path to where the survey
      was downloaded to, so that you can interact with it accordingly.

get_cache_date:
  short: >-
      Returns the private member variable cache-date, which is the date
      the client was last created/valiated against the DHS API.
  value: >-
      POSIXct and POSIXt time

set_cache_date:
  short: >-
      Sets the private member variable cache-date, which is the date
      the client was last created/valiated against the DHS API. This should
      never really be needed but is icluded to demonstrate the cache clearing
      properties of the client in the vignette.
  params:
    date: POSIXct and POSIXt time to update cache time to.

save_client:
  short: >-
    Internally save the client object as an .rds file within the root
    directory for the client.

clear_namespace:
  short: >-
    Clear the keys and values associated within a cache context. The dhs client
    caches a number of different tasks, and places these within specific contexts
    using the package \code{storr::storr_rds}.
  params:
    namespace: Character string for the namespace to be cleared.

